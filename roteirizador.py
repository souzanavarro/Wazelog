import streamlit as st
import pandas as pd
import os
import json

def carregar_configuracoes():
    """
    Carrega as configura√ß√µes salvas do roteirizador.
    """
    caminho_config = "database/configuracoes_roteirizador.json"
    if os.path.exists(caminho_config):
        with open(caminho_config, "r") as f:
            return json.load(f)
    return {}

def salvar_configuracoes(config):
    """
    Salva as configura√ß√µes do roteirizador em um arquivo JSON.
    """
    caminho_config = "database/configuracoes_roteirizador.json"
    os.makedirs(os.path.dirname(caminho_config), exist_ok=True)
    with open(caminho_config, "w") as f:
        json.dump(config, f, indent=4)

def carregar_dados_pedidos():
    """
    Carrega os dados de pedidos do banco de dados.
    """
    caminho_pedidos = "database/pedidos.csv"
    if os.path.exists(caminho_pedidos):
        return pd.read_csv(caminho_pedidos)
    else:
        st.error("Nenhum pedido encontrado. Certifique-se de que os pedidos foram cadastrados.")
        return pd.DataFrame()

def carregar_dados_frota():
    """
    Carrega os dados da frota do banco de dados.
    """
    caminho_frota = "database/frota.csv"
    if os.path.exists(caminho_frota):
        return pd.read_csv(caminho_frota)
    else:
        st.error("Nenhuma frota encontrada. Certifique-se de que a frota foi cadastrada.")
        return pd.DataFrame()

def preparar_dados_para_roteirizacao(pedidos, frota, config):
    """
    Prepara os dados de pedidos e frota para a roteiriza√ß√£o.
    """
    # Filtrar ve√≠culos dispon√≠veis
    frota_disponivel = frota[frota["Dispon√≠vel"].str.lower() == "sim"]

    # Verificar se h√° ve√≠culos dispon√≠veis
    if frota_disponivel.empty:
        st.error("Nenhum ve√≠culo dispon√≠vel na frota.")
        return None, None

    # Verificar se h√° pedidos com coordenadas v√°lidas
    pedidos_validos = pedidos.dropna(subset=["Latitude", "Longitude"])
    if pedidos_validos.empty:
        st.error("Nenhum pedido com coordenadas v√°lidas encontrado.")
        return None, None

    # Aplicar restri√ß√µes e prefer√™ncias
    if config.get("capacidade"):
        pedidos_validos = pedidos_validos[pedidos_validos["Peso dos Itens"] <= frota_disponivel["Capacidade (Kg)"].max()]

    return pedidos_validos, frota_disponivel

def pagina_roteirizador():
    st.title("‚öôÔ∏è Configura√ß√µes do Roteirizador")
    st.markdown("""
    ### Configure os par√¢metros para a roteiriza√ß√£o:
    - Escolha o crit√©rio de otimiza√ß√£o.
    - Defina restri√ß√µes e prefer√™ncias.
    """)

    # Adicionar uma caixa de informa√ß√µes no topo
    st.info("‚ö° Configure os par√¢metros abaixo para otimizar suas rotas de entrega.")

    # Carregar configura√ß√µes salvas
    config_salvas = carregar_configuracoes()

    # Dividir a p√°gina em duas colunas para melhor organiza√ß√£o
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### üõ†Ô∏è Crit√©rio de Otimiza√ß√£o")
        criterio = st.selectbox(
            "Escolha o crit√©rio:",
            ["Menor Dist√¢ncia", "Menor Tempo", "Menor Custo"],
            index=["Menor Dist√¢ncia", "Menor Tempo", "Menor Custo"].index(config_salvas.get("criterio", "Menor Dist√¢ncia"))
        )

        st.markdown("#### üîí Restri√ß√µes")
        janela_tempo = st.checkbox("Considerar janelas de tempo", value=config_salvas.get("janela_tempo", False))
        capacidade = st.checkbox("Respeitar capacidade dos ve√≠culos", value=config_salvas.get("capacidade", False))

    with col2:
        st.markdown("#### üìç Prefer√™ncias")
        ponto_partida = st.text_input(
            "Ponto de partida (endere√ßo ou coordenadas)",
            value=config_salvas.get("ponto_partida", ""),
            placeholder="Ex: Rua A, 123, S√£o Paulo"
        )
        ponto_chegada = st.text_input(
            "Ponto de chegada (opcional)",
            value=config_salvas.get("ponto_chegada", ""),
            placeholder="Ex: Rua B, 456, S√£o Paulo"
        )

    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        salvar = st.button("üíæ Salvar Configura√ß√µes")
        preparar = st.button("üöÄ Preparar Dados para Roteiriza√ß√£o")

        if salvar:
            config = {
                "criterio": criterio,
                "janela_tempo": janela_tempo,
                "capacidade": capacidade,
                "ponto_partida": ponto_partida,
                "ponto_chegada": ponto_chegada
            }
            salvar_configuracoes(config)
            st.success("Configura√ß√µes salvas com sucesso! Arquivo criado em `database/configuracoes_roteirizador.json`.")

        if preparar:
            pedidos = carregar_dados_pedidos()
            frota = carregar_dados_frota()
            config = carregar_configuracoes()

            if not pedidos.empty and not frota.empty:
                pedidos_validos, frota_disponivel = preparar_dados_para_roteirizacao(pedidos, frota, config)
                if pedidos_validos is not None and frota_disponivel is not None:
                    st.success("Dados preparados com sucesso!")
                    st.markdown("#### Pedidos V√°lidos")
                    st.dataframe(pedidos_validos)
                    st.markdown("#### Frota Dispon√≠vel")
                    st.dataframe(frota_disponivel)
